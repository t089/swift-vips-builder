name: Build and Push Docker Images

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: t089/swift-vips-builder

jobs:
  create-amd64-runner:
    name: Create Hetzner Cloud AMD64 runner
    runs-on: ubuntu-latest
    outputs:
      label: ${{ steps.create-hcloud-runner.outputs.label }}
      server_id: ${{ steps.create-hcloud-runner.outputs.server_id }}
    steps:
      - name: Create AMD64 runner
        id: create-hcloud-runner
        uses: Cyclenerd/hcloud-github-runner@v1
        with:
          mode: create
          github_token: ${{ secrets.PERSONAL_ACCESS_TOKEN }}
          hcloud_token: ${{ secrets.HCLOUD_TOKEN }}
          server_type: cpx51  # 16 vCPU, 32GB RAM, x86
          location: nbg1
          image: ubuntu-24.04
          ssh_key: 101152278
          pre_runner_script: |
            # Install Docker
            apt-get update
            apt-get install -y ca-certificates curl
            install -m 0755 -d /etc/apt/keyrings
            curl -fsSL https://download.docker.com/linux/ubuntu/gpg -o /etc/apt/keyrings/docker.asc
            chmod a+r /etc/apt/keyrings/docker.asc
            echo "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.asc] https://download.docker.com/linux/ubuntu $(. /etc/os-release && echo "$VERSION_CODENAME") stable" | tee /etc/apt/sources.list.d/docker.list > /dev/null
            apt-get update
            apt-get install -y docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin
            usermod -aG docker runner || true


  create-arm64-runner:
    name: Create Hetzner Cloud ARM64 runner
    runs-on: ubuntu-latest
    outputs:
      label: ${{ steps.create-hcloud-runner.outputs.label }}
      server_id: ${{ steps.create-hcloud-runner.outputs.server_id }}
    steps:
      - name: Create ARM64 runner
        id: create-hcloud-runner
        uses: Cyclenerd/hcloud-github-runner@v1
        with:
          mode: create
          github_token: ${{ secrets.PERSONAL_ACCESS_TOKEN }}
          hcloud_token: ${{ secrets.HCLOUD_TOKEN }}
          server_type: cax41  # 16 vCPU, 32GB RAM, ARM
          location: nbg1
          image: ubuntu-24.04
          ssh_key: 101152278
          pre_runner_script: |
            # Install Docker
            apt-get update
            apt-get install -y ca-certificates curl
            install -m 0755 -d /etc/apt/keyrings
            curl -fsSL https://download.docker.com/linux/ubuntu/gpg -o /etc/apt/keyrings/docker.asc
            chmod a+r /etc/apt/keyrings/docker.asc
            echo "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.asc] https://download.docker.com/linux/ubuntu $(. /etc/os-release && echo "$VERSION_CODENAME") stable" | tee /etc/apt/sources.list.d/docker.list > /dev/null
            apt-get update
            apt-get install -y docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin
            usermod -aG docker runner || true

  build-amd64:
    name: Build AMD64 images
    needs: create-amd64-runner
    strategy:
      max-parallel: 4
      matrix:
        # when updating swift or vips versions make sure to also update below
        swift-version: ["6.2.0", "6.1.3", "6.0.3"]
        vips-version: ["8.15.5", "8.16.1", "8.17.2"]
    runs-on: ${{ needs.create-amd64-runner.outputs.label }}
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Build and push Docker image
        run: |
          TAG="${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:swift-${{ matrix.swift-version }}-vips-${{ matrix.vips-version }}-amd64"
          docker build \
            --build-arg SWIFT_VERSION=${{ matrix.swift-version }} \
            --build-arg VIPS_VERSION=${{ matrix.vips-version }} \
            --platform linux/amd64 \
            --tag "$TAG" \
            --push=${{ github.event_name != 'pull_request' }} \
            .

  build-arm64:
    name: Build ARM64 images
    needs: create-arm64-runner
    strategy:
      max-parallel: 4
      matrix:
        # when updating swift or vips versions make sure to also update below
        swift-version: ["6.2.0", "6.1.3", "6.0.3"]
        vips-version: ["8.15.5", "8.16.1", "8.17.2"]
    runs-on: ${{ needs.create-arm64-runner.outputs.label }}
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Build and push Docker image
        run: |
          TAG="${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:swift-${{ matrix.swift-version }}-vips-${{ matrix.vips-version }}-arm64"
          docker build \
            --build-arg SWIFT_VERSION=${{ matrix.swift-version }} \
            --build-arg VIPS_VERSION=${{ matrix.vips-version }} \
            --platform linux/arm64 \
            --tag "$TAG" \
            --push=${{ github.event_name != 'pull_request' }} \
            .

  create-manifests:
    name: Create multi-arch manifests
    needs: [build-amd64, build-arm64]
    if: github.event_name != 'pull_request'
    runs-on: ubuntu-latest
    strategy:
      matrix:
        swift-version: ["6.2.0", "6.1.3", "6.0.3"]
        vips-version: ["8.15.5", "8.16.1", "8.17.2"]
    
    steps:
      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Create and push manifest
        run: |
          MANIFEST_TAG="${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:swift-${{ matrix.swift-version }}-vips-${{ matrix.vips-version }}"
          AMD64_TAG="${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:swift-${{ matrix.swift-version }}-vips-${{ matrix.vips-version }}-amd64"
          ARM64_TAG="${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:swift-${{ matrix.swift-version }}-vips-${{ matrix.vips-version }}-arm64"
          
          docker manifest create "$MANIFEST_TAG" \
            "$AMD64_TAG" \
            "$ARM64_TAG"
          
          docker manifest push "$MANIFEST_TAG"

  delete-amd64-runner:
    name: Delete Hetzner Cloud AMD64 runner
    needs: [create-amd64-runner, build-amd64, create-manifests]
    runs-on: ubuntu-latest
    if: ${{ always() }}
    steps:
      - name: Delete AMD64 runner
        uses: Cyclenerd/hcloud-github-runner@v1
        with:
          mode: delete
          github_token: ${{ secrets.PERSONAL_ACCESS_TOKEN }}
          hcloud_token: ${{ secrets.HCLOUD_TOKEN }}
          name: ${{ needs.create-amd64-runner.outputs.label }}
          server_id: ${{ needs.create-amd64-runner.outputs.server_id }}

  delete-arm64-runner:
    name: Delete Hetzner Cloud ARM64 runner
    needs: [create-arm64-runner, build-arm64, create-manifests]
    runs-on: ubuntu-latest
    if: ${{ always() }}
    steps:
      - name: Delete ARM64 runner
        uses: Cyclenerd/hcloud-github-runner@v1
        with:
          mode: delete
          github_token: ${{ secrets.PERSONAL_ACCESS_TOKEN }}
          hcloud_token: ${{ secrets.HCLOUD_TOKEN }}
          name: ${{ needs.create-arm64-runner.outputs.label }}
          server_id: ${{ needs.create-arm64-runner.outputs.server_id }}